/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
///		Copyright 2020 (C) Bruno Xavier B. Leite
//////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "LE_Intensity_Sky.h"
#include "Components/SkyLightComponent.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define LOCTEXT_NAMESPACE "Synaptech"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SLE_Intensity_Sky::SLE_Intensity_Sky() {}
SLE_Intensity_Sky::~SLE_Intensity_Sky() {}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void SLE_Intensity_Sky::Construct(const FArguments &InArgs, ASkyLight* Target) {
	Item = Target;
	//
	//
	ChildSlot.HAlign(HAlign_Fill).VAlign(VAlign_Fill)
		[
			SNew(SBox)
			.Padding(FMargin(4))
		[
			SNew(SBorder).Padding(FMargin(6))
			.VAlign(VAlign_Fill).HAlign(HAlign_Fill)
		.BorderImage(FEditorStyle::GetBrush("ToolPanel.DarkGroupBorder"))
		[
			SNew(SNumericEntryBox<float>)
			.OnValueChanged(this, &SLE_Intensity_Sky::OnValueChanged)
		.Value(this, &SLE_Intensity_Sky::GetValue)
		.AllowSpin(true)
		]
		]
		];
}

void SLE_Intensity_Sky::OnValueChanged(float FloatValue) const {
	if (!Item.IsValid()) { return; }
	//
	FPropertyChangedEvent PropEditEvent(USkyLightComponent::StaticClass()->FindPropertyByName(GET_MEMBER_NAME_CHECKED(USkyLightComponent, Intensity)));
	EComponentMobility::Type Mobility = Item->GetLightComponent()->Mobility;
	//
	Item->Modify();
	Item->GetLightComponent()->Mobility = EComponentMobility::Stationary;
	Item->GetLightComponent()->InvalidateLightingCache();
	Item->GetLightComponent()->SetIntensity(FloatValue);
	Item->GetLightComponent()->MarkRenderStateDirty();
	//
	Item->GetLightComponent()->PostEditChangeProperty(PropEditEvent);
	Item->GetLightComponent()->Mobility = Mobility;
}

TOptional<float> SLE_Intensity_Sky::GetValue() const {
	if (!Item.IsValid()) { return 0.f; }
	//
	return Item->GetLightComponent()->Intensity;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef LOCTEXT_NAMESPACE

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////